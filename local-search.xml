<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/01/12/hello-world/"/>
    <url>/2023/01/12/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2><h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>CMU15-445 2022 Project 0</title>
    <link href="/2023/01/12/CMU-2022-P0/"/>
    <url>/2023/01/12/CMU-2022-P0/</url>
    
    <content type="html"><![CDATA[<h1 id="cmu15-445-2022-fall-project-0-实验记录"><a class="markdownIt-Anchor" href="#cmu15-445-2022-fall-project-0-实验记录"></a> CMU15-445 2022 Fall Project 0 实验记录</h1><h2 id="1-实验说明"><a class="markdownIt-Anchor" href="#1-实验说明"></a> 1. 实验说明</h2><p>CMU15-445 官网的说明内容 <a href="https://15445.courses.cs.cmu.edu/fall2022/project0/">https://15445.courses.cs.cmu.edu/fall2022/project0/</a></p><h2 id="2-项目介绍"><a class="markdownIt-Anchor" href="#2-项目介绍"></a> 2. 项目介绍</h2><p>这是一个热身项目，顺便复习一下 C++ 的相关知识。Project 0 要求实现一个字典树（trie），实现插入、删除和查找算法。</p><p>trie 树的相关内容可以参考 <a href="https://zhuanlan.zhihu.com/p/67431582">https://zhuanlan.zhihu.com/p/67431582</a> 和相应的 leetcode 题目。</p><h2 id="3-脚本工具"><a class="markdownIt-Anchor" href="#3-脚本工具"></a> 3. 脚本工具</h2><p>将项目编译相关的语句写成一个 shell 脚本 <code>project-maker.sh</code>。第一行中后两句的作用是指定编译器为 clang。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cmake -DCMAKE_BUILD_TYPE=Debug .. -DCMAKE_C_COMPILER=/usr/bin/clang-12 -DCMAKE_CXX_COMPILER=/usr/bin/clang++-12<br>make -j9<br></code></pre></td></tr></table></figure><p>将代码格式相关的语句写成一个 shell 脚本 <code>format-checker.sh</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">make format<br>make check-lint<br>make check-clang-tidy-p0<br></code></pre></td></tr></table></figure><p>将项目测试相关的语句写成一个 shell 脚本 <code>test-executor.sh</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">make starter_trie_test<br>./test/starter_trie_test<br></code></pre></td></tr></table></figure><p>最后用一个脚本 <code>auto-make-check.sh</code> 将以上三个脚本合在一起。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">sh ../project-maker.sh<br>sh ../format-checker.sh<br>sh ../test-executor.sh<br></code></pre></td></tr></table></figure><p>如果给脚本添加权限，那么执行的时候就可以省略前面的 sh，直接采用 <code>../auto-make-check.sh</code> 的方式调用。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">chmod u+x auto-make-check.sh<br></code></pre></td></tr></table></figure><h2 id="4-关键实现"><a class="markdownIt-Anchor" href="#4-关键实现"></a> 4. 关键实现</h2><p>首先注意代码一定要符合 Google C++ Style Guide 要求。如果代码格式不合格，在线评测会直接打<strong>零分</strong>！代码风格详见 <a href="https://google-styleguide.readthedocs.io/zh_CN/latest/">google-styleguide</a>。</p><p>遵守课程要求，这里不给出完整的实现代码，仅摘录一些个人认为需要注意的地方加以说明。实际上 2022 年课程的官方讲解和代码中 TODO 提示足够详细，理解了字典树的结构就可以愉快地 Coding 啦！</p><h3 id="41-c-知识"><a class="markdownIt-Anchor" href="#41-c-知识"></a> 4.1 C++ 知识</h3><ol><li><code>explicit</code> 关键字</li></ol><p><code>explicit</code> 这个关键字用来说明这个类的构造不支持隐式类型转换，避免可能存在的错误和性能浪费。</p><ol start="2"><li><code>std::move</code> 的使用</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">TrieNode</span>(TrieNode &amp;&amp;other_trie_node) <span class="hljs-keyword">noexcept</span> &#123;<br>  key_char_ = other_trie_node.key_char_;<br>  is_end_ = other_trie_node.is_end_;<br>  children_ = std::<span class="hljs-built_in">move</span>(other_trie_node.children_);<br>&#125;<br></code></pre></td></tr></table></figure><p>在 TrieNode 移动构造实现中，由于 <code>children_</code> 中存储的是 <code>unique_ptr</code>，不能使用拷贝构造，只能使用移动构造，故使用 <code>std::move</code> 将参数转换为右值。</p><ol start="3"><li><code>std::forward</code> 的使用</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">TrieNodeWithValue</span>(TrieNode &amp;&amp;trieNode, T value) : <span class="hljs-built_in">TrieNode</span>(std::forward&lt;TrieNode&gt;(trieNode)) &#123;<br>  value_ = value;<br>  <span class="hljs-built_in">SetEndNode</span>(<span class="hljs-literal">true</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><code>std::forward&lt;type&gt;()</code> 必须配合 <code>T&amp;&amp;</code> 来使用。例如 <code>T&amp;&amp;</code> 接受左值 <code>int&amp;</code> 时，<code>T</code> 会被推断为 <code>int&amp;</code>，而 <code>T&amp;&amp;</code> 接受右值 <code>int&amp;&amp;</code> 时，<code>T</code> 被推断为 <code>int</code>。在 <code>std::forward&lt;T&gt;</code> 中只是单纯的返回 <code>T&amp;&amp;</code>。那么依据外层是左值时，<code>T</code> 为 <code>int&amp;</code>，那么 <code>T&amp;&amp;</code> 即 <code>int&amp;</code>, <code>T&amp;&amp;</code> 仍为 <code>int&amp;</code>，当外层函数参数为右值，<code>T&amp;&amp;</code> 为 <code>int&amp;&amp;</code>，这样就保证了<strong>传进来是左值则还是左值，是右值还是右值</strong>。</p><h3 id="42-trie-类方法实现"><a class="markdownIt-Anchor" href="#42-trie-类方法实现"></a> 4.2 Trie 类方法实现</h3><h4 id="421-insert-方法"><a class="markdownIt-Anchor" href="#421-insert-方法"></a> 4.2.1 Insert 方法</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">Insert</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string &amp;key, T value)</span> -&gt; <span class="hljs-type">bool</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (key.<span class="hljs-built_in">empty</span>()) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125;<br>  latch_.<span class="hljs-built_in">WLock</span>();<br>  <span class="hljs-keyword">auto</span> curr = &amp;root_;  <span class="hljs-comment">// 使用指针</span><br>  std::unique_ptr&lt;TrieNode&gt; *parent;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> k : key) &#123;<br>    <span class="hljs-comment">// 如果没有这个字符，则插入这个字符</span><br>    <span class="hljs-keyword">if</span> (curr-&gt;<span class="hljs-built_in">get</span>()-&gt;<span class="hljs-built_in">GetChildNode</span>(k) == <span class="hljs-literal">nullptr</span>) &#123;<br>      curr-&gt;<span class="hljs-built_in">get</span>()-&gt;<span class="hljs-built_in">InsertChildNode</span>(k, std::<span class="hljs-built_in">make_unique</span>&lt;TrieNode&gt;(k));<br>    &#125;<br>    parent = curr;<br>    curr = curr-&gt;<span class="hljs-built_in">get</span>()-&gt;<span class="hljs-built_in">GetChildNode</span>(k);<br>  &#125;<br>  <span class="hljs-keyword">if</span> (curr-&gt;<span class="hljs-built_in">get</span>()-&gt;<span class="hljs-built_in">IsEndNode</span>()) &#123;<br>    latch_.<span class="hljs-built_in">WUnlock</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125;<br>  <span class="hljs-keyword">auto</span> new_node = std::make_unique&lt;TrieNodeWithValue&lt;T&gt;&gt;(std::<span class="hljs-built_in">move</span>(**curr), value);<br>  parent-&gt;<span class="hljs-built_in">get</span>()-&gt;<span class="hljs-built_in">RemoveChildNode</span>(key.<span class="hljs-built_in">back</span>());<br>  parent-&gt;<span class="hljs-built_in">get</span>()-&gt;<span class="hljs-built_in">InsertChildNode</span>(key.<span class="hljs-built_in">back</span>(), std::<span class="hljs-built_in">move</span>(new_node));<br>  latch_.<span class="hljs-built_in">WUnlock</span>();<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>遍历 key 中的字符，缺少就插入。到达最后一个节点，如果是 EndNode 说明出现重复插入，返回 false，否则删除原来的节点，插入新节点。</p><h4 id="422-remove-方法"><a class="markdownIt-Anchor" href="#422-remove-方法"></a> 4.2.2 Remove 方法</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">RemoveHelper</span><span class="hljs-params">(std::unique_ptr&lt;TrieNode&gt; *curr, <span class="hljs-type">size_t</span> idx, <span class="hljs-type">const</span> std::string &amp;key, <span class="hljs-type">bool</span> *success)</span> -&gt; <span class="hljs-type">bool</span> </span>&#123;<br>  <span class="hljs-comment">// 最后一个节点，告知父节点该节点能否删除</span><br>  <span class="hljs-keyword">if</span> (idx == key.<span class="hljs-built_in">length</span>()) &#123;<br>    *success = <span class="hljs-literal">true</span>;<br>    curr-&gt;<span class="hljs-built_in">get</span>()-&gt;<span class="hljs-built_in">SetEndNode</span>(<span class="hljs-literal">false</span>);<br>    <span class="hljs-keyword">return</span> !curr-&gt;<span class="hljs-built_in">get</span>()-&gt;<span class="hljs-built_in">HasChildren</span>() &amp;&amp; !curr-&gt;<span class="hljs-built_in">get</span>()-&gt;<span class="hljs-built_in">IsEndNode</span>();<br>  &#125;<br>  <span class="hljs-comment">// 路线不通</span><br>  <span class="hljs-keyword">if</span> (curr-&gt;<span class="hljs-built_in">get</span>()-&gt;<span class="hljs-built_in">GetChildNode</span>(key[idx]) == <span class="hljs-literal">nullptr</span>) &#123;<br>    *success = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125;<br>  <span class="hljs-type">bool</span> child_removable = <span class="hljs-built_in">RemoveHelper</span>(curr-&gt;<span class="hljs-built_in">get</span>()-&gt;<span class="hljs-built_in">GetChildNode</span>(key[idx]), idx + <span class="hljs-number">1</span>, key, success);<br>  <span class="hljs-keyword">if</span> (!(*success)) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125;<br>  <span class="hljs-comment">// 子节点可以删除</span><br>  <span class="hljs-keyword">if</span> (child_removable) &#123;<br>    curr-&gt;<span class="hljs-built_in">get</span>()-&gt;<span class="hljs-built_in">RemoveChildNode</span>(key[idx]);<br>  &#125;<br>  <span class="hljs-keyword">return</span> !curr-&gt;<span class="hljs-built_in">get</span>()-&gt;<span class="hljs-built_in">HasChildren</span>() &amp;&amp; !curr-&gt;<span class="hljs-built_in">get</span>()-&gt;<span class="hljs-built_in">IsEndNode</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">Remove</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string &amp;key)</span> -&gt; <span class="hljs-type">bool</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (key.<span class="hljs-built_in">empty</span>()) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>  &#125;<br>  <span class="hljs-keyword">auto</span> curr = &amp;root_;<br>  <span class="hljs-type">bool</span> succeed = <span class="hljs-literal">false</span>;<br>  latch_.<span class="hljs-built_in">WLock</span>();<br>  <span class="hljs-built_in">RemoveHelper</span>(curr, <span class="hljs-number">0</span>, key, &amp;succeed);<br>  latch_.<span class="hljs-built_in">WUnlock</span>();<br>  <span class="hljs-keyword">return</span> succeed;<br>&#125;<br></code></pre></td></tr></table></figure><p>写一个 helper 函数帮助递归实现删除。</p><h3 id="423-getvalue-方法"><a class="markdownIt-Anchor" href="#423-getvalue-方法"></a> 4.2.3 GetValue 方法</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">GetValue</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string &amp;key, <span class="hljs-type">bool</span> *success)</span> -&gt; T </span>&#123;<br>  latch_.<span class="hljs-built_in">RLock</span>();<br>  <span class="hljs-keyword">auto</span> curr = &amp;root_;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> k : key) &#123;<br>    <span class="hljs-comment">// 路线不通</span><br>    <span class="hljs-keyword">if</span> (curr-&gt;<span class="hljs-built_in">get</span>()-&gt;<span class="hljs-built_in">GetChildNode</span>(k) == <span class="hljs-literal">nullptr</span>) &#123;<br>      *success = <span class="hljs-literal">false</span>;<br>      latch_.<span class="hljs-built_in">RUnlock</span>();<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">T</span>();<br>    &#125;<br>    curr = curr-&gt;<span class="hljs-built_in">get</span>()-&gt;<span class="hljs-built_in">GetChildNode</span>(k);<br>  &#125;<br>  <span class="hljs-keyword">if</span> (!curr-&gt;<span class="hljs-built_in">get</span>()-&gt;<span class="hljs-built_in">IsEndNode</span>()) &#123;<br>    *success = <span class="hljs-literal">false</span>;<br>    latch_.<span class="hljs-built_in">RUnlock</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">T</span>();<br>  &#125;<br>  <span class="hljs-keyword">auto</span> tmp_node = <span class="hljs-keyword">dynamic_cast</span>&lt;TrieNodeWithValue&lt;T&gt; *&gt;(curr-&gt;<span class="hljs-built_in">get</span>());<br>  <span class="hljs-keyword">if</span> (tmp_node != <span class="hljs-literal">nullptr</span>) &#123;<br>    *success = <span class="hljs-literal">true</span>;<br>    latch_.<span class="hljs-built_in">RUnlock</span>();<br>    <span class="hljs-keyword">return</span> tmp_node-&gt;<span class="hljs-built_in">GetValue</span>();<br>  &#125;<br>  *success = <span class="hljs-literal">false</span>;<br>  latch_.<span class="hljs-built_in">RUnlock</span>();<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">T</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-测试结果"><a class="markdownIt-Anchor" href="#5-测试结果"></a> 5. 测试结果</h2><h3 id="51-本地测试"><a class="markdownIt-Anchor" href="#51-本地测试"></a> 5.1 本地测试</h3><p><img src="/2023/01/12/CMU-2022-P0/localtest-p0.png" alt="localtest-p0"></p><h3 id="52-在线测试"><a class="markdownIt-Anchor" href="#52-在线测试"></a> 5.2 在线测试</h3><p><img src="/2023/01/12/CMU-2022-P0/onlinetest-p0.png" alt="onlinetest-p0"></p><h2 id="6-实验总结"><a class="markdownIt-Anchor" href="#6-实验总结"></a> 6. 实验总结</h2><p>热身结束，正式上路！</p>]]></content>
    
    
    <categories>
      
      <category>LABS</category>
      
      <category>CMU15-445</category>
      
      <category>2022</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实验</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu 配置记录</title>
    <link href="/2023/01/04/Ubuntu-%E9%85%8D%E7%BD%AE%E8%AE%B0%E5%BD%95/"/>
    <url>/2023/01/04/Ubuntu-%E9%85%8D%E7%BD%AE%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="ubuntu-配置记录"><a class="markdownIt-Anchor" href="#ubuntu-配置记录"></a> Ubuntu 配置记录</h1><p>这里记录一些本人在 Ubuntu 20.04 LTS 操作系统中遇到的问题和解决方案。</p><h2 id="2022-年"><a class="markdownIt-Anchor" href="#2022-年"></a> 2022 年</h2><h3 id="12-月-22-日"><a class="markdownIt-Anchor" href="#12-月-22-日"></a> 12 月 22 日</h3><ul><li>NVIDIA 显卡驱动选择</li></ul><p>电脑是 R7000 2020，显卡为 GTX 1650。首先禁用 nouveau 驱动，然后在 Ubuntu 的附加驱动中选择 510 闭源驱动，重启后终端输入 <code>nvidia-smi</code> 即可看到显卡信息。</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Ubuntu</category>
      
    </categories>
    
    
    <tags>
      
      <tag>折腾</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MIT 线性代数</title>
    <link href="/2023/01/01/MIT-%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/"/>
    <url>/2023/01/01/MIT-%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="mit-线性代数资源汇总"><a class="markdownIt-Anchor" href="#mit-线性代数资源汇总"></a> MIT 线性代数资源汇总</h1><p>这里记录学习 MIT 线性代数课程过程中参考的视频和讲解。</p><ul><li>课程视频: <a href="https://www.bilibili.com/video/BV16Z4y1U7oU/?vd_source=778c90ca02df31ac37dcf07f3a083870">MIT 线性代数课程 - B 站</a></li><li>笔记参考: <a href="https://zhuanlan.zhihu.com/p/45707832">MIT 线性代数笔记 - 知乎</a></li></ul><p>矩阵相关的数学知识可以参考这位答主 Iterator 的专栏<a href="https://www.zhihu.com/column/c_1318542724966715392">「工科数学」</a>。</p><h2 id="章节分类"><a class="markdownIt-Anchor" href="#章节分类"></a> 章节分类</h2><h3 id="01-方程组的几何解释-行图像和列图像"><a class="markdownIt-Anchor" href="#01-方程组的几何解释-行图像和列图像"></a> 01 方程组的几何解释: 行图像和列图像</h3><ul><li><a href="https://www.bilibili.com/video/BV16Z4y1U7oU?p=1">视频</a></li><li><a href="https://zhuanlan.zhihu.com/p/45708880">笔记</a></li></ul><h3 id="02-矩阵消元"><a class="markdownIt-Anchor" href="#02-矩阵消元"></a> 02 矩阵消元</h3><ul><li><a href="https://www.bilibili.com/video/BV16Z4y1U7oU?p=2">视频</a></li><li><a href="https://zhuanlan.zhihu.com/p/45717944">笔记</a></li></ul><h3 id="03-矩阵乘法和逆矩阵"><a class="markdownIt-Anchor" href="#03-矩阵乘法和逆矩阵"></a> 03 矩阵乘法和逆矩阵</h3><ul><li><a href="https://www.bilibili.com/video/BV16Z4y1U7oU?p=3">视频</a></li><li><a href="https://zhuanlan.zhihu.com/p/45750189">笔记</a></li></ul><h3 id="04-矩阵的-lu-分解"><a class="markdownIt-Anchor" href="#04-矩阵的-lu-分解"></a> 04 矩阵的 LU 分解</h3><ul><li><a href="https://www.bilibili.com/video/BV16Z4y1U7oU?p=4">视频</a></li><li><a href="https://zhuanlan.zhihu.com/p/45784001">笔记</a></li></ul><h3 id="05-转置-置换和向量空间"><a class="markdownIt-Anchor" href="#05-转置-置换和向量空间"></a> 05 转置、置换和向量空间</h3><ul><li><a href="https://www.bilibili.com/video/BV16Z4y1U7oU?p=5">视频</a></li><li><a href="https://zhuanlan.zhihu.com/p/45804907">笔记</a></li></ul><h3 id="06-列空间和零空间"><a class="markdownIt-Anchor" href="#06-列空间和零空间"></a> 06 列空间和零空间</h3><ul><li><a href="https://www.bilibili.com/video/BV16Z4y1U7oU?p=6">视频</a></li><li><a href="https://zhuanlan.zhihu.com/p/45810014">笔记</a></li></ul><h3 id="07-求解-ax0-主变量-特解"><a class="markdownIt-Anchor" href="#07-求解-ax0-主变量-特解"></a> 07 求解 Ax=0: 主变量、特解</h3><ul><li><a href="https://www.bilibili.com/video/BV16Z4y1U7oU?p=7">视频</a></li><li><a href="https://zhuanlan.zhihu.com/p/45815011">笔记</a></li></ul><h3 id="08-求解-axb-可解性和解的结构"><a class="markdownIt-Anchor" href="#08-求解-axb-可解性和解的结构"></a> 08 求解 Ax=b: 可解性和解的结构</h3><ul><li><a href="https://www.bilibili.com/video/BV16Z4y1U7oU?p=8&amp;vd_source=778c90ca02df31ac37dcf07f3a083870">视频</a></li><li><a href="https://zhuanlan.zhihu.com/p/45816772">笔记</a></li><li>总结</li></ul><table><thead><tr><th style="text-align:center">秩的大小</th><th style="text-align:center">r = m = n</th><th style="text-align:center">r = n &lt; m</th><th style="text-align:center">r = m &lt; n</th><th>r &lt; n, r &lt; m</th></tr></thead><tbody><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>R</mi></mrow><annotation encoding="application/x-tex">R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span></td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>R</mi><mo>=</mo><mi>I</mi></mrow><annotation encoding="application/x-tex">R = I</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span></span></span></span></td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>R</mi><mo>=</mo><mo stretchy="false">[</mo><mi>I</mi><mtext> </mtext><mn>0</mn><msup><mo stretchy="false">]</mo><mi>T</mi></msup></mrow><annotation encoding="application/x-tex">R = [I \space 0]^T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.0913309999999998em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mspace"> </span><span class="mord">0</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span></span></span></span></td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>R</mi><mo>=</mo><mo stretchy="false">[</mo><mi>I</mi><mtext> </mtext><mi>F</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">R = [I \space F]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mspace"> </span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mclose">]</span></span></span></span></td><td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>R</mi><mo>=</mo><mrow><mo fence="true">[</mo><mi>I</mi><mtext> </mtext><mi>F</mi><mspace linebreak="newline"></mspace><mn>0</mn><mtext> </mtext><mn>0</mn><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">R = \left[I \space F \\ 0 \space 0\right]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">[</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mspace"> </span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mspace newline"></span><span class="mord">0</span><span class="mspace"> </span><span class="mord">0</span><span class="mclose delimcenter" style="top:0em;">]</span></span></span></span></span></td></tr><tr><td style="text-align:center">解的情况</td><td style="text-align:center">唯一解</td><td style="text-align:center">无解或唯一解</td><td style="text-align:center">无穷多解</td><td>无解或无穷多解</td></tr></tbody></table><h3 id="09-线性相关-基-维度"><a class="markdownIt-Anchor" href="#09-线性相关-基-维度"></a> 09 线性相关、基、维度</h3><h3 id="coming-soon"><a class="markdownIt-Anchor" href="#coming-soon"></a> Coming soon …</h3>]]></content>
    
    
    <categories>
      
      <category>Learning</category>
      
      <category>Math</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Deepin 折腾笔记</title>
    <link href="/2022/12/24/Deepin-%E6%8A%98%E8%85%BE%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/12/24/Deepin-%E6%8A%98%E8%85%BE%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="deepin-折腾笔记"><a class="markdownIt-Anchor" href="#deepin-折腾笔记"></a> Deepin 折腾笔记</h1><p>这里记录一些本人在 Deepin v20.8 操作系统中遇到的问题和解决方案。更多问题可以在 <a href="https://bbs.deepin.org/">Deepin 社区</a> 中找到解答。</p><h2 id="2023-年"><a class="markdownIt-Anchor" href="#2023-年"></a> 2023 年</h2><h3 id="1-月-4-日"><a class="markdownIt-Anchor" href="#1-月-4-日"></a> 1 月 4 日</h3><ul><li>解决 pyenv 识别 anaconda 环境的问题</li></ul><p>电脑同时安装了 pyenv 和 anaconda，希望主要使用 pyenv 管理 Python 环境，即能够用 pyenv 设置 conda 环境。</p><ol><li>PATH 环境变量修改</li></ol><p>为了保证 pyenv 的命令在 anaconda 之后，编辑 <code>.bash_profile</code> 文件，使得 pyenv 相关的命令位于 anaconda 之后。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">&gt;&gt;&gt; conda initialize &gt;&gt;&gt;</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">!! Contents within this block are managed by <span class="hljs-string">&#x27;conda init&#x27;</span> !!</span><br>__conda_setup=&quot;$(&#x27;/home/Asuna/anaconda3/bin/conda&#x27; &#x27;shell.bash&#x27; &#x27;hook&#x27; 2&gt; /dev/null)&quot;<br>if [ $? -eq 0 ]; then<br>    eval &quot;$__conda_setup&quot;<br>else<br>    if [ -f &quot;/home/Asuna/anaconda3/etc/profile.d/conda.sh&quot; ]; then<br>        . &quot;/home/Asuna/anaconda3/etc/profile.d/conda.sh&quot;<br>    else<br>        export PATH=&quot;/home/Asuna/anaconda3/bin:$PATH&quot;<br>    fi<br>fi<br>unset __conda_setup<br><span class="hljs-meta prompt_"># </span><span class="language-bash">&lt;&lt;&lt; <span class="hljs-string">conda initialize &lt;&lt;&lt;</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">pyenv settings</span></span><br>export PATH=&quot;$HOME/.pyenv/bin:$PATH&quot;<br>eval &quot;$(pyenv init -)&quot;<br>eval &quot;$(pyenv virtualenv-init -)&quot;<br></code></pre></td></tr></table></figure><ol start="2"><li>pyenv versions 识别配置</li></ol><p>为了使 <code>pyenv versions</code> 命令能够识别 anaconda 及其创建的环境，将 <code>anaconda</code> 文件夹软链接到 <code>.pyenv/versions</code>，即 <code>ln -s ~/anaconda3 ~/.pyenv/versions/anaconda</code>。之后再使用 <code>pyenv versions</code> 命令就可以看到 anaconda 的环境了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">pyenv versions</span><br>* system (set by /home/Asuna/.pyenv/version)<br>  3.10.7<br>  3.11.1<br>  anaconda<br>  anaconda/envs/torch<br></code></pre></td></tr></table></figure><ol start="3"><li>fish 配置文件修改</li></ol><p>由于本人在 bash 下执行 <code>conda init fish</code> 报错，根据 stackoverflow 上的<a href="https://stackoverflow.com/a/64797720">解答</a>在 <code>~/.config/fish/config.fish</code> 文件中增加一行。修改完的 <code>config.fish</code> 文件如下。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">source /home/Asuna/anaconda3/etc/fish/conf.d/conda.fish<br><br>pyenv init - | source<br></code></pre></td></tr></table></figure><p>完成这些设置后，就可以根据需要使用 <code>pyenv [global | local | shell] [version]</code> 命令设置 Python 版本了。</p><h2 id="2022-年"><a class="markdownIt-Anchor" href="#2022-年"></a> 2022 年</h2><h3 id="12-月-23-日"><a class="markdownIt-Anchor" href="#12-月-23-日"></a> 12 月 23 日</h3><ul><li>解决 fcitx5 在文本编辑器、WPS 中输入不显示字符的问题</li></ul><ol><li>使用 <a href="https://storage.deepin.org/thread/20220514125412442_libFcitx5Core.so.5.0.zip">libFcitx5Core.so.5.0.zip</a> 替换 <code>/usr/lib/x86_64-linux-gnu/libFcitx5Core.so.5.0.14</code></li><li>在 <code>~/.bashrc</code> 加入以下语句：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">export FCITX_NO_PREEDIT_APPS=&quot;gvim.*,wps.*,deepin-editor&quot;<br></code></pre></td></tr></table></figure><ol start="3"><li>重启后可以正常输入</li></ol>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Deepin</category>
      
    </categories>
    
    
    <tags>
      
      <tag>折腾</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>测试文章</title>
    <link href="/2022/12/17/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
    <url>/2022/12/17/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<p><img src="../images/1215-1.jpg" alt="测试图片"></p>]]></content>
    
    
    <categories>
      
      <category>Test</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
